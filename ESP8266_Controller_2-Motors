#include <ESP8266WiFi.h>
#include <espnow.h>

// REPLACE WITH RECEIVER MAC Address
uint8_t broadcastAddress[] = {0x94, 0x3C, 0xC6, 0x38, 0x83, 0x74};//Receiver's MAC Adress


// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
 int Front;
 int Left;
 int Right;
 int Back;
} struct_message;

// Create a struct_message called myData
struct_message myData;

unsigned long lastTime = 0;  
unsigned long timerDelay = 10;  // send readings timer

// Callback when data is sent
void OnDataSent(uint8_t *mac_addr, uint8_t sendStatus) {
  Serial.print("Last Packet Send Status: ");
  if (sendStatus == 0){
    Serial.println("Delivery success");
  }
  else{
    Serial.println("Delivery fail");
  }

  
}
int front = 1;
int left =1;
int right = 1;
int back =1;
 
void setup() {
  
  pinMode(D5,INPUT);
  pinMode(D0,INPUT);
  pinMode(D6,INPUT);
  pinMode(D7,INPUT);

  // Init Serial Monitor
  Serial.begin(115200);
 
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  esp_now_add_peer(broadcastAddress, ESP_NOW_ROLE_SLAVE, 1, NULL, 0);
}
 
void loop() {
  
  front = digitalRead(D0);
  left = digitalRead(D7);
  right = digitalRead(D6);
  back = digitalRead(D5);

  Serial.print("Front   ");Serial.println(front);
  Serial.print("Left   ");Serial.println(left);
  Serial.print("Right   ");Serial.println(right);
  Serial.print("Back   ");Serial.println(back);

  
  if ((millis() - lastTime) > timerDelay) {
    // Set values to send
    myData.Front =front;
    myData.Left = left;
    myData.Right =right;
    myData.Back = back;
    // Send message via ESP-NOW
    esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));

    lastTime = millis();
  }
}
